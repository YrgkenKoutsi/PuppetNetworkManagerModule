# This defined resource creates the user defined connection keyfile.
# Parametres:
#   $config = The definition of the connection REQUIRED
#   $ensure = state of the interface config DEFAULT: present
#   $state = state of the interface (UP/DOWN) not relevant when $ensure == 'absent' DEFAULT: 'up'
#   $id = the name of the connection DEFAULT: $title of the resource
# Notes:
#   This resource supplies some, hopefully sane, defaults you can override in the $config parametre
#   connection.uuid = generated by the module unless it is already an uuid
#   connection.type = DEFAULT: ethernet
#   ethernet.auto-negotiate = true
#   ipv4.method = auto
#   ipv6.method = auto
# WARNING:
#   The name of master or parent are translated to uuid unless they are provided as uuids!
#   You can not override this behaviour.
define networkmanager::ifc::fallback(
  Hash                      $config,
  Enum['absent', 'present'] $ensure = present,
  Enum['up', 'down']        $state = 'up',
  String                    $id = $title,
) {
  include networkmanager
  Networkmanager::Ifc::Fallback[$title] ~> Class['networkmanager']
  File['/etc/NetworkManager/NetworkManager.conf'] -> Networkmanager::Ifc::Fallback[$title]
  if $id !~ String[3, $networkmanager::max_length_of_connection_id] {
    fail("The connection \$id must have length from 3 to ${networkmanager::max_length_of_connection_id} characters")
  }


  $uuid = networkmanager::connection_uuid($id)

  $needed_params = {
    'connection' => {
      'id'          => $id,
      'uuid'        => $uuid,
      'type'        => 'ethernet',
    },
    'ethernet'   => {
      'auto-negotiate' => true,
    },
    'ipv4'       => {
      'method' => 'auto',
    },
    'ipv6'       => {
      'method' => 'auto',
    }
  }


  $parents = keys($config).filter |$p|{
    'parent' in keys($config[$p])
  }.reduce({}) |$nup, $px| {
    $nup + {$px => {'parent' => networkmanager::connection_uuid($config[$px]['parent'])}}
  }
  $masters = keys($config).filter |$m|{
    'master' in keys($config[$m])
  }.reduce({}) |$num, $mx| {
    $num + {$mx => {'master' => networkmanager::connection_uuid($config[$mx]['master'])}}
  }


  $keyfile_contents = deep_merge($needed_params, $config, $parents, $masters)

  if 'connection' in $keyfile_contents
    and 'interface-name' in $keyfile_contents['connection']
    and 15 < $keyfile_contents['connection']['interface-name'].length() {
      fail("The 'connection.interface-name' for connection '${id}' can not be longer than 15 characters!")
  }

  networkmanager::connection_keyfile_manage {
    $id:
      ensure  => $ensure,
      content => $keyfile_contents;
  }

  if $ensure == present {
    networkmanager::activate_connection($uuid, $id, $state)
  }

  include networkmanager::reload
  Networkmanager::Ifc::Fallback[$title] ~> Class['networkmanager::reload']
}

